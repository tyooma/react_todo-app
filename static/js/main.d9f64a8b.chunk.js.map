{"version":3,"sources":["components/TodoApp/TodoApp.js","components/TodoList/TodoList.js","components/Shapes/TodosShape.js","components/TodoFilter.js/TodoFilter.js","App.js","index.js"],"names":["TodoApp","state","temp","tempId","addTempTodo","event","setState","target","value","submitTodo","text","id","input","keyCode","props","addTodo","prevState","className","onChange","this","onKeyDown","placeholder","React","Component","TodoList","PropTypes","arrayOf","shape","todo","string","isRequired","isDone","bool","number","edited","editing","startEditText","currentTarget","addEditText","finishEditText","edit","parentElement","blur","todos","map","completed","onDoubleClick","key","type","checked","readOnly","onClick","check","htmlFor","remove","onBlur","ref","focus","TodoFilter","filterTodos","clear","filter","length","App","showTodos","todoId","trim","checkTodo","item","removeTodo","editTodo","editedTodo","clearCompleted","makeThemChecked","every","shownTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d9f64a8b.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport class TodoApp extends React.Component {\n  state = {\n    temp: '',\n    tempId: 1,\n  }\n\n  addTempTodo = (event) => {\n    this.setState({\n      temp: event.target.value,\n    });\n  }\n\n  submitTodo = (event) => {\n    const text = this.state.temp;\n    const id = this.state.tempId + 1;\n    const input = event.target;\n\n    if (event.keyCode === 13) {\n      this.props.addTodo(text, id);\n\n      this.setState(prevState => ({\n        tempId: prevState.tempId + 1,\n        temp: '',\n      }));\n\n      input.value = '';\n    }\n  }\n\n  render() {\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n        <input\n          onChange={this.addTempTodo}\n          onKeyDown={this.submitTodo}\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n        />\n      </header>\n    );\n  }\n}\n\nTodoApp.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodosShape } from '../Shapes/TodosShape';\n\nexport class TodoList extends React.Component {\n  state = {\n    edited: '',\n    editing: false,\n  }\n\n  startEditText = (event) => {\n    this.setState({\n      editing: true,\n    });\n\n    const todo = event.currentTarget;\n\n    if (!todo.className) {\n      todo.className = 'editing';\n    }\n  }\n\n  addEditText = (event) => {\n    this.setState({\n      edited: event.target.value,\n    });\n  }\n\n  finishEditText = id => (event) => {\n    const input = event.target;\n\n    if (event.keyCode === 13) {\n      if (this.state.edited) {\n        this.props.edit(this.state.edited, id);\n        input.parentElement.className = '';\n      } else {\n        input.parentElement.className = '';\n      }\n    }\n\n    this.setState({\n      editing: false,\n    });\n  }\n\n  blur = id => (event) => {\n    const input = event.target;\n\n    if (this.state.edited) {\n      this.props.edit(this.state.edited, id);\n      input.parentElement.className = '';\n    } else {\n      input.parentElement.className = '';\n    }\n\n    this.setState({\n      editing: false,\n    });\n  }\n\n  render() {\n    return (\n      <ul className=\"todo-list\">\n        {this.props.todos.map(todo => (\n          <li\n            className={todo.completed ? 'completed' : ''}\n            onDoubleClick={this.startEditText}\n            key={todo.id}\n          >\n            <div className=\"view\">\n              <input\n                type=\"checkbox\"\n                checked={todo.completed}\n                readOnly\n                className=\"toggle\"\n                id={todo.id}\n                onClick={() => this.props.check(todo.id)}\n              />\n              <span htmlFor={todo.id}>{todo.todo}</span>\n              <button\n                type=\"button\"\n                className=\"destroy\"\n                onClick={() => this.props.remove(todo.id)}\n              />\n            </div>\n            {\n              this.state.editing\n                ? (\n                  <input\n                    type=\"text\"\n                    className=\"edit\"\n                    onChange={this.addEditText}\n                    onKeyDown={this.finishEditText(todo.id)}\n                    onBlur={this.blur(todo.id)}\n                    ref={input => input && input.focus()}\n                    value={todo.todo}\n                  />\n                )\n                : <></>\n            }\n          </li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  check: PropTypes.func.isRequired,\n  remove: PropTypes.func.isRequired,\n  edit: PropTypes.func.isRequired,\n  todos: TodosShape.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nexport const TodosShape = PropTypes.arrayOf(\n  PropTypes.shape({\n    todo: PropTypes.string.isRequired,\n    isDone: PropTypes.bool.isRequired,\n    id: PropTypes.number.isRequired,\n  }),\n).isRequired;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { TodosShape } from '../Shapes/TodosShape';\n\nexport const TodoFilter = ({ todos, filterTodos, clear }) => (\n  <footer className=\"footer\">\n    <span className=\"todo-count\">\n      {`${todos.filter(todo => todo.completed === false).length} items left`}\n    </span>\n    <ul className=\"filters\">\n      <li>\n        <button\n          onClick={() => filterTodos('all')}\n          type=\"button\"\n        >\n          All\n        </button>\n      </li>\n      <li>\n        <button\n          type=\"button\"\n          onClick={() => filterTodos('inProces')}\n        >\n          Active\n        </button>\n      </li>\n      <li>\n        <button\n          onClick={() => filterTodos('completed')}\n          type=\"button\"\n        >\n          Completed\n        </button>\n      </li>\n    </ul>\n    <button\n      type=\"button\"\n      className=\"clear-completed\"\n      onClick={clear}\n    >\n      Clear completed\n    </button>\n  </footer>\n);\n\nTodoFilter.propTypes = {\n  todos: TodosShape.isRequired,\n  filterTodos: PropTypes.func.isRequired,\n  clear: PropTypes.func.isRequired,\n};\n","import React from 'react';\n\nimport { TodoApp } from './components/TodoApp/TodoApp';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { TodoFilter } from './components/TodoFilter.js/TodoFilter';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    showTodos: 'all',\n  }\n\n  addTodo = (text, todoId) => {\n    if (text.trim().length) {\n      this.setState(prevState => ({\n        todos: [\n          ...prevState.todos,\n          {\n            id: todoId,\n            todo: text,\n            completed: false,\n          },\n        ],\n      }));\n    }\n  }\n\n  checkTodo = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((item) => {\n        if (item.id === id) {\n          return {\n            ...item,\n            completed: !item.completed,\n          };\n        }\n\n        return item;\n      }),\n    }));\n  }\n\n  removeTodo = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(item => item.id !== id),\n    }));\n  }\n\n  editTodo = (editedTodo, id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((item) => {\n        if (item.id === id) {\n          return {\n            ...item,\n            todo: editedTodo,\n          };\n        }\n\n        return item;\n      }),\n    }));\n  }\n\n  filterTodos = (filter) => {\n    this.setState({\n      showTodos: filter,\n    });\n  }\n\n  clearCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.completed === false),\n    }));\n  }\n\n  makeThemChecked = () => {\n    if (this.state.todos.every(todo => todo.completed === true)) {\n      this.setState(prevState => ({\n        todos: prevState.todos.map(todo => ({\n          ...todo,\n          completed: false,\n        })),\n      }));\n    } else {\n      this.setState(prevState => ({\n        todos: prevState.todos.map(todo => ({\n          ...todo,\n          completed: true,\n        })),\n      }));\n    }\n  }\n\n  showTodos(shownTodos) {\n    if (shownTodos === 'all') {\n      return this.state.todos;\n    }\n\n    if (shownTodos === 'active') {\n      return this.state.todos.filter(todo => todo.completed === false);\n    }\n\n    if (shownTodos === 'completed') {\n      return this.state.todos.filter(todo => todo.completed === true);\n    }\n\n    return null;\n  }\n\n  render() {\n    const { todos } = this.state;\n\n    return (\n      <section className=\"todoapp\">\n        <TodoApp addTodo={this.addTodo} />\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            onClick={this.makeThemChecked}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n          {todos.length\n            ? (\n              <TodoList\n                todos={this.showTodos(this.state.showTodos)}\n                check={this.checkTodo}\n                remove={this.removeTodo}\n                edit={this.editTodo}\n              />\n            )\n            : <></>\n          }\n        </section>\n        {todos.length\n          ? (\n            <TodoFilter\n              todos={this.state.todos}\n              filterTodos={this.filterTodos}\n              clear={this.clearCompleted}\n            />\n          )\n          : <></>\n        }\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}
{"version":3,"sources":["components/TodoApp/TodoApp.js","components/TodoItem/TodoItem.js","components/TodoList/TodoList.js","components/TodoFilter/TodoFilter.js","App.js","index.js"],"names":["TodoApp","state","temp","onChange","event","setState","target","value","addNewTodo","props","todos","addTodo","input","newTodo","id","length","title","keyCode","className","name","type","placeholder","this","onKeyDown","Component","TodoItem","todo","checkTodo","removeTodo","checked","completed","onClick","htmlFor","TodoList","edited","remove","map","key","React","TodoFilter","filterChange","clearCompleted","filter","href","App","show","prevState","checkedTodo","editTodo","makeThemChecked","selectedFilter","edit","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fee22ec2.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport class TodoApp extends Component {\n  state = {\n    temp: '',\n  }\n\n  onChange = (event) => {\n    this.setState({\n      temp: event.target.value,\n    });\n  }\n\n  addNewTodo = (event) => {\n    const { todos, addTodo } = this.props;\n    const { temp } = this.state;\n    const input = event.target;\n\n    const newTodo = {\n      id: todos.length + 1,\n      title: temp,\n    };\n\n    if (event.keyCode === 13) {\n      addTodo(newTodo);\n\n      this.setState({\n        temp: '',\n      });\n\n      input.value = '';\n    }\n  }\n\n  render() {\n    return (\n      <header className=\"header\">\n        <h1>todos</h1>\n        <input\n          name=\"title\"\n          type=\"text\"\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          onChange={this.onChange}\n          onKeyDown={this.addNewTodo}\n        />\n      </header>\n    );\n  }\n}\n","import React from 'react';\n\nexport const TodoItem = ({ todo, checkTodo, removeTodo }) => (\n  <>\n    <div className=\"view\">\n      <input\n        type=\"checkbox\"\n        checked={todo.completed}\n        id={todo.id}\n        className=\"toggle\"\n        onClick={() => checkTodo(todo.id)}\n      />\n      <label htmlFor={todo.id}>{todo.title}</label>\n      <button\n        type=\"button\"\n        className=\"destroy\"\n        onClick={() => removeTodo(todo.id)}\n      />\n    </div>\n    <input\n      type=\"text\"\n      className=\"edit\"\n    />\n  </>\n);\n","import React from 'react';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\nexport class TodoList extends React.Component {\n  state = {\n    edited: '',\n  }\n\n  // openEditor = (event) => {\n  //   const todo = event.currentTarget;\n  //   const input = event.currentTarget.children[1];\n\n  //   input.value = event.target.innerText;\n\n  //   if (!todo.className) {\n  //     todo.className = 'editing';\n  //   }\n  // }\n\n  // editText = (event) => {\n  //   this.setState({\n  //     edited: event.target.value,\n  //   });\n  // }\n\n  // finishEdit = id => (event) => {\n  //   const input = event.target;\n\n  //   if (event.keyCode === 13) {\n  //     if (this.state.editText) {\n  //       this.props.edit(this.state.edited, id);\n  //       input.parentElement.className = '';\n  //     } else {\n  //       input.parentElement.className = '';\n  //     }\n  //   }\n  // }\n\n  render() {\n    const { todos, checked, remove } = this.props;\n\n    return (\n      <ul className=\"todo-list\">\n        {todos.map(todo => (\n          <li\n            className={todo.completed ? 'completed' : ''}\n            key={todo.id}\n          >\n            <TodoItem\n              todo={todo}\n              checkTodo={checked}\n              removeTodo={remove}\n            />\n          </li>\n        ))}\n      </ul>\n    );\n  }\n}\n","import React from 'react';\n\nexport const TodoFilter = ({ todos, filterChange, clearCompleted }) => (\n  <footer className=\"footer\">\n    <span className=\"todo-count\">\n      {`${todos.filter(todo => todo.completed === false).length} items left`}\n    </span>\n\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          // className=\"selected\"\n          onClick={() => filterChange('all')}\n        >\n          All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          onClick={() => filterChange('active')}\n        >\n          Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/completed\"\n          onClick={() => filterChange('completed')}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n\n    <button\n      type=\"button\"\n      className=\"clear-completed\"\n      onClick={() => clearCompleted()}\n    >\n      Clear completed\n    </button>\n  </footer>\n);\n","import React from 'react';\nimport { TodoApp } from './components/TodoApp/TodoApp';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { TodoFilter } from './components/TodoFilter/TodoFilter';\n\nexport class App extends React.Component {\n  state = {\n    todos: [],\n    show: 'all',\n  }\n\n  addTodo = (todo) => {\n    this.setState(prevState => ({\n      todos: [...prevState.todos, todo],\n    }));\n  }\n\n  checkedTodo = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  editTodo = (edited, id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            title: edited,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  removeTodo = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== id),\n    }));\n  }\n\n  makeThemChecked = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => todo.completed === 'true'),\n    }));\n  }\n\n  filterChange = (filter) => {\n    this.setState({\n      show: filter,\n    });\n  }\n\n  clearCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.completed === false),\n    }));\n  }\n\n  show(selectedFilter) {\n    if (selectedFilter === 'all') {\n      return this.state.todos;\n    }\n\n    if (selectedFilter === 'active') {\n      return this.state.todos.filter(todo => !todo.completed);\n    }\n\n    if (selectedFilter === 'completed') {\n      return this.state.todos.filter(todo => todo.completed);\n    }\n\n    return '';\n  }\n\n  render() {\n    const { todos, show } = this.state;\n\n    return (\n      <section className=\"todoapp\">\n        <TodoApp\n          todos={todos}\n          addTodo={this.addTodo}\n        />\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            onClick={this.makeThemChecked}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n          <TodoList\n            todos={this.show(show)}\n            checked={this.checkedTodo}\n            edit={this.editTodo}\n            remove={this.removeTodo}\n          />\n        </section>\n        {\n          todos.length\n            ? (\n              <TodoFilter\n                todos={todos}\n                filterChange={this.filterChange}\n                clearCompleted={this.clearCompleted}\n              />\n            )\n            : ''\n        }\n      </section>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}